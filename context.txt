=============2025-03-18 13:37:15===================

/home/tom/.pyenv/versions/3.11.10/lib/python3.11/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0
testmon: changed files: tests/test_readme.py, unchanged files: 0, environment: default
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
rootdir: /home/tom/worktrees/agent_aider_worktree/please_add_tests_20250318_124846
plugins: mock-3.14.0, asyncio-0.24.0, testmon-2.1.3, anyio-4.9.0, timeout-2.3.1, repeat-0.9.3, xdist-3.6.1, cov-6.0.0, flake8-1.3.0, hypothesis-6.121.2, random-order-1.1.1, pylint-0.21.0
asyncio: mode=Mode.STRICT, default_loop_scope=None
timeout: 10.0s
timeout method: signal
timeout func_only: False
collected 4 items / 3 deselected / 1 selected

tests/test_readme.py F                                                   [100%]

=================================== FAILURES ===================================
_____________________ test_readme_usage_section_formatting _____________________

    def test_readme_usage_section_formatting():
        """Verify usage section has proper code formatting with valid examples"""
        with open("README.md", "r", encoding="utf-8") as f:
            readme = f.read()
    
        # Extract usage section content
        usage_section = readme.split("## Usage")[1].split("##")[0]
        # Check for bash code blocks
        code_blocks = [block for block in usage_section.split("```") if block.strip()]
        bash_blocks = [block for block in code_blocks if block.startswith("bash")]
        assert len(bash_blocks) > 0, "No bash code blocks found in usage section"
        # Check for required command patterns in bash blocks
        required_patterns = [
            r"agent-aider-worktree(\s+--[\w-]+)*\s+['\"][^\"']+['\"]"
        ]
    
        pattern_found = False
        for block in bash_blocks:
>           if any(re.search(pattern, block) for pattern in required_patterns):

tests/test_readme.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f0dc9683010>

>   if any(re.search(pattern, block) for pattern in required_patterns):
E   NameError: name 're' is not defined

tests/test_readme.py:51: NameError
=========================== short test summary info ============================
FAILED tests/test_readme.py::test_readme_usage_section_formatting - NameError...
======================= 1 failed, 3 deselected in 0.26s ========================





=====================================================================
************* Module agent-aider-worktree
agent-aider-worktree.py:434:4: E0001: Parsing failed: 'invalid syntax (agent-aider-worktree, line 434)' (syntax-error)
************* Module test_readme
tests/test_readme.py:48:0: C0303: Trailing whitespace (trailing-whitespace)
tests/test_readme.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
tests/test_readme.py:51:15: E0602: Undefined variable 're' (undefined-variable)

------------------------------------------------------------------
Your code has been rated at 6.25/10 (previous run: 7.81/10, -1.56)

Focus on code that causes this test to fail: 

Focus on fixing the linting issues


# Test files content:

# test_readme.py
"""Test cases for README.md validation"""

from pathlib import Path


def test_readme_exists():
    """Check that README.md exists"""
    assert Path("README.md").exists(), "README.md file not found"


def test_readme_contents():
    """Check README.md is not empty and contains key sections"""
    readme = Path("README.md").read_text(encoding="utf-8")
    assert len(readme) >= 500, "README.md seems too short"
    assert "# Agent Aider Worktree" in readme, "Missing main header in README.md"
    assert "## Installation" in readme, "Missing Installation section in README.md"
    assert "## Usage" in readme, "Missing Usage section in README.md"
    assert "## License" in readme, "Missing License section in README.md"
    assert "MIT License" in readme, "Missing license information"


def test_readme_installation_instructions():
    """Validate installation instructions are correct"""
    with open("README.md", "r", encoding="utf-8") as f:
        readme = f.read()

    installation_section = readme.split("## Installation")[1].split("##")[0]
    assert (
        "pip install agent-aider-worktree" in installation_section.lower()
    ), "Missing correct pip installation command"


def test_readme_usage_section_formatting():
    """Verify usage section has proper code formatting with valid examples"""
    with open("README.md", "r", encoding="utf-8") as f:
        readme = f.read()

    # Extract usage section content
    usage_section = readme.split("## Usage")[1].split("##")[0]
    # Check for bash code blocks
    code_blocks = [block for block in usage_section.split("```") if block.strip()]
    bash_blocks = [block for block in code_blocks if block.startswith("bash")]
    assert len(bash_blocks) > 0, "No bash code blocks found in usage section"
    # Check for required command patterns in bash blocks
    required_patterns = [
        r"agent-aider-worktree(\s+--[\w-]+)*\s+['\"][^\"']+['\"]"
    ]
    
    pattern_found = False
    for block in bash_blocks:
        if any(re.search(pattern, block) for pattern in required_patterns):
            pattern_found = True
            # Verify command formatting
            assert (
                '"' in block or "'" in block
            ), f"Task argument should be properly quoted in example command: {block}"
            assert (
                "agent-aider-worktree" in block
            ), f"Missing agent-aider-worktree command in bash example: {block}"
            assert (
                len(block.split()) >= 2
            ), f"Command should include a task argument: {block}"
    
    assert pattern_found, "Missing valid example command in bash code blocks of usage section"
